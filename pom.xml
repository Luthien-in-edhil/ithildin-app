<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>aduial</groupId>
    <artifactId>ithildin</artifactId>
    <version>0.2-SNAPSHOT</version>

    <!--    <parent>-->
    <!--        <groupId>org.springframework.boot</groupId>-->
    <!--        <artifactId>spring-boot-starter-parent</artifactId>-->
    <!--        <version>2.4.3</version>-->
    <!--        <relativePath/> &lt;!&ndash; lookup parent from aduial.ithildin.repository &ndash;&gt;-->
    <!--    </parent>-->

    <properties>
        <main-class>aduial.ithildin.IthildinBootApplication</main-class>
        <!-- These options affect the generated installer -->
        <app.name>TestApp</app.name>
        <!-- This converts the build timestamp to a Windows-installer friendly version number. Note that Maven
         generated timestamp is in UTC, not local time.
         For more information see:
         https://docs.microsoft.com/en-us/windows/win32/msi/productversion
         https://docs.oracle.com/en/java/javase/15/docs/api/java.base/java/text/SimpleDateFormat.html
         -->
        <maven.build.timestamp.format>yy.w.ukkmm</maven.build.timestamp.format>
        <app.version>${maven.build.timestamp}</app.version>

        <!-- This should be the . version of the project artifactId -->
        <java-mod-name>ithildin</java-mod-name>

        <!-- for using the IDE -->
        <javafx.version>15.0.1</javafx.version>
        <springboot.version>2.4.3</springboot.version>
        <fxweaver.version>1.3.0</fxweaver.version>
        <h2.version>1.4.200</h2.version>

        <!-- These version numbers are used in both the macOS and Windows profiles -->
        <javafx-mods-version>javafx-jmods-15.0.1</javafx-mods-version>
        <javafx-libs-version>javafx-sdk-15.0.1</javafx-libs-version>
        <javafx.libs>${project.basedir}/${platform}-javafx/${javafx-libs-version}/lib/</javafx.libs>
        <javafx.mods>${project.basedir}/${platform}-javafx/${javafx-mods-version}/</javafx.mods>

        <!-- Eliminate warnings about UTF-8 in the build -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <!-- These are the modules explicitly used by the project. You may want to add/remove if you
         are using other modules. -->
        <!--        <modules-in-use>javafx.base,javafx.controls,javafx.graphics,javafx.fxml,javafx.web,java.logging</modules-in-use>-->
        <modules-in-use>javafx.controls,javafx.fxml,javafx.web</modules-in-use>

        <maven.compiler.source>15</maven.compiler.source>
        <maven.compiler.target>15</maven.compiler.target>

        <!-- This project uses the https://github.com/wiverson/jtoolprovider-plugin to invoke jdeps and jpackage -->
        <jtoolprovider.version>1.0.30</jtoolprovider.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${springboot.version}</version>
                <scope>import</scope>
                <type>pom</type>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <version>${h2.version}</version>
            <scope>runtime</scope>
        </dependency>

        <dependency>
            <groupId>net.rgielen</groupId>
            <artifactId>javafx-weaver-spring-boot-starter</artifactId>
            <version>${fxweaver.version}</version>
        </dependency>

        <dependency>
            <groupId>net.bytebuddy</groupId>
            <artifactId>byte-buddy</artifactId>
            <version>1.10.21</version>
        </dependency>

        <!-- Base JavaFX import. This dependency is provided via a module, so we don't want it included in the
         shaded master jar, but by including it here it it works nicely with IDEs such as IntelliJ. -->

        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
            <version>${javafx.version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-fxml</artifactId>
            <version>${javafx.version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-web</artifactId>
            <version>${javafx.version}</version>
            <scope>compile</scope>
        </dependency>
    </dependencies>

    <build>
        <resources>
            <resource>
                <!-- Here we are processing the platform-specific jpackage command files, adding in Maven
                 properties for configuration. -->
                <directory>${project.basedir}/src/packaging</directory>
                <filtering>true</filtering>
                <targetPath>${project.build.directory}/packaging</targetPath>
            </resource>
        </resources>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-site-plugin</artifactId>
                    <version>3.9.1</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-project-info-reports-plugin</artifactId>
                    <version>3.1.1</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <version>3.1.2</version>
                </plugin>
                <plugin>
                    <groupId>io.github.wiverson</groupId>
                    <artifactId>jtoolprovider-plugin</artifactId>
                    <version>${jtoolprovider.version}</version>
                </plugin>
            </plugins>
        </pluginManagement>

        <plugins>
            <plugin>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>3.1.2</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-install-plugin</artifactId>
                <version>3.0.0-M1</version>
                <configuration>
                    <!-- This is an app, so we don't want to install it in the local Maven repository -->
                    <skip>true</skip>
                </configuration>
            </plugin>
            <plugin>
                <!-- Plugin to make working with JavaFX nicer. See https://github.com/openjfx/javafx-maven-plugin -->
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <version>0.0.5</version>
                <configuration>
                    <mainClass>${main-class}</mainClass>
                </configuration>
            </plugin>
            <plugin>
                <!-- https://github.com/wiverson/jtoolprovider-plugin -->
                <groupId>io.github.wiverson</groupId>
                <artifactId>jtoolprovider-plugin</artifactId>
                <version>1.0.31-SNAPSHOT</version>
                <executions>
                    <execution>
                        <!-- https://github.com/wiverson/jtoolprovider-plugin/blob/main/collect-modules-doc.md -->
                        <id>collect-modules</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>collect-modules</goal>
                        </goals>
                        <configuration>
                            <providedModuleDirectories>
                                <directory>${javafx.mods}</directory>
                                <directory>${java.home}\jmods\</directory>
                            </providedModuleDirectories>
                            <ignoreJars>
                                <jar>javafx-controls-15.jar</jar>
                                <jar>javafx-fxml-15.jar</jar>
                                <jar>javafx-web-15.jar</jar>
                                <jar>javafx-graphics-15.jar</jar>
                                <jar>javafx-base-15.jar</jar>
                                <jar>jakarta.xml.bind-api</jar>
                                <jar>jaxb-runtime</jar>
                            </ignoreJars>
                            <stripJars>
                                <jar>HikariCP</jar>
                            </stripJars>
                            <debug>true</debug>
                        </configuration>
                    </execution>

                    <!-- We use the jdeps tool here on the exploded directory to automatically generate a module-info.java
                    file for the entire shaded jar. You'll notice that we are explicitly passing in the JavaFX modules here -
                    you may want to tweak this as you use (or don't use) different modules. The smaller the set of modules,
                    the smaller the final app will be.

                    https://github.com/wiverson/jtoolprovider-plugin/blob/main/java-tool-doc.md
                    -->
                    <execution>
                        <id>jdeps</id>
                        <phase>package</phase>
                        <goals>
                            <goal>java-tool</goal>
                        </goals>
                        <configuration>
                            <toolName>jdeps</toolName>
                            <cleanDirectories>
                                <directory>${project.build.directory}/work</directory>
                            </cleanDirectories>
                            <multiRelease>${java.specification.version}</multiRelease>
                            <modulePath>${java.home}/jmods/:${project.build.directory}/modules:${javafx.mods}/:${project.build.directory}/declared-not-modules:${project.build.directory}/declared-modules
                            </modulePath>
                            <generateModuleInfo>${project.build.directory}/work</generateModuleInfo>
                            <args>
                                <arg>--no-recursive</arg>
<!--                                <arg>&#45;&#45;ignore-missing-deps</arg>-->
                                <arg>${project.build.directory}/${project.build.finalName}.jar</arg>
                            </args>
                        </configuration>
                    </execution>
                    <!-- The command that actually generates the installer. The options for each platform
                    are found the /src/packaging directory. These files are copied into the target directory by
                    the Maven resources plugin, which does the filtering to replace the original values with
                    the actual Maven properties.

                    https://github.com/wiverson/jtoolprovider-plugin/blob/main/java-tool-doc.md
                    -->
                    <execution>
                        <id>jpackage</id>
                        <phase>install</phase>
                        <goals>
                            <goal>java-tool</goal>
                        </goals>
                        <configuration>
                            <toolName>jpackage</toolName>
                            <args>@${project.build.directory}/packaging/${platform}-jpackage.txt</args>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <!-- This plugin compiles module-info for the code in this project -->
                <groupId>org.moditect</groupId>
                <artifactId>moditect-maven-plugin</artifactId>
                <version>1.0.0.RC1</version>
                <executions>
                    <execution>
                        <id>add-module-infos</id>
                        <phase>package</phase>
                        <goals>
                            <goal>add-module-info</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/modules</outputDirectory>
                            <overwriteExistingFiles>true</overwriteExistingFiles>
                            <modules>
                                <module>
                                    <file>${project.build.directory}/${project.build.finalName}.jar</file>
                                    <moduleInfoFile>${project.build.directory}/work/${java-mod-name}/module-info.java
                                    </moduleInfoFile>
                                </module>
                            </modules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <profiles>
        <!-- We use the built-in Maven profile activation system to set the platform property.
        These properties are then use to build the directory paths to the platform specific resources.
        It would be great if Maven automatically added the os family as a property by default
         -->
        <profile>
            <id>unix-active</id>
            <activation>
                <os>
                    <family>unix</family>
                </os>
            </activation>
            <properties>
                <platform>unix</platform>
            </properties>
        </profile>
        <profile>
            <id>windows-active</id>
            <activation>
                <os>
                    <family>windows</family>
                </os>
            </activation>
            <properties>
                <platform>windows</platform>
            </properties>
        </profile>
        <profile>
            <id>mac-active</id>
            <activation>
                <os>
                    <family>mac</family>
                </os>
            </activation>
            <properties>
                <platform>mac</platform>
            </properties>
        </profile>
    </profiles>
</project>